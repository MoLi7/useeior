% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DisaggregateFunctions.R
\name{disaggregateMultiYearOutput}
\alias{disaggregateMultiYearOutput}
\title{#' Disaggregate Commodity Output model object
#' @param model A complete EEIO model: a list with USEEIO model components and attributes.
#' @param disagg Specifications for disaggregating the current Table
#'
#' @return model A dataframe with the disaggregated GDPGrossOutputIO by year
disaggregateGDPGrossOutputIO <- function(model, disagg)
{
  
  #Determine the index of the first disaggregated sector
  originalGDPIndex <- which(rownames(model$GDP$BEAGrossOutputIO)==disagg$OriginalSectorCode)
  #Obtain row with original vector in GDPGrossOutput object
  originalGDPVector <- model$GDP$BEAGrossOutputIO[originalGDPIndex,]
  #Create new rows where disaggregated values will be stored
  disaggGDPBEAGrossOutputIOSectors <-originalGDPVector[rep(seq_len(nrow(originalGDPVector)), length(disagg$DisaggregatedSectorCodes)),,drop=FALSE]
  
  
  #Get Index for Disaggregated Industries in the use table
  disaggUseIndIndex <- which(colnames(model$UseTransactions)==disagg$DisaggregatedSectorCodes[1])
  disaggUseEndIndex <- disaggUseIndIndex+length(disagg$DisaggregatedSectorCodes)-1
  
  #calculate industry ratios after disaggregation from Use table
  disaggIndRatios <- colSums(model$UseTransactions[,disaggUseIndIndex:disaggUseEndIndex]) + colSums(model$UseValueAdded[,disaggUseIndIndex:disaggUseEndIndex])
  disaggIndRatios <- disaggIndRatios / sum(disaggIndRatios) 
  
  #apply ratios to GDP values
  disaggGDPBEAGrossOutputIOSectors <- disaggGDPBEAGrossOutputIOSectors *t(disaggIndRatios)
  #rename rows
  rownames(disaggGDPBEAGrossOutputIOSectors) <- disagg$DisaggregatedSectorCodes
  
  #bind new values to original table
  newGDPBEAGrossOutputIO <- rbind(model$GDP$BEAGrossOutputIO[1:originalGDPIndex-1,], disaggGDPBEAGrossOutputIOSectors, model$GDP$BEAGrossOutputIO[-(1:originalGDPIndex),])
  
  
  return(newGDPBEAGrossOutputIO)
  
}
Disaggregate Commodity Output model object}
\usage{
disaggregateMultiYearOutput(model, disagg, output_type = "Commodity")
}
\arguments{
\item{model}{A complete EEIO model: a list with USEEIO model components and attributes.}

\item{disagg}{Specifications for disaggregating the current Table}

\item{output_type}{A string that indicates whether the Commodity or Industry output should be disaggregated}
}
\value{
model A dataframe with the disaggregated GDPGrossOutputIO by year
}
\description{
#' Disaggregate Commodity Output model object
#' @param model A complete EEIO model: a list with USEEIO model components and attributes.
#' @param disagg Specifications for disaggregating the current Table
#'
#' @return model A dataframe with the disaggregated GDPGrossOutputIO by year
disaggregateGDPGrossOutputIO <- function(model, disagg)
{
  
  #Determine the index of the first disaggregated sector
  originalGDPIndex <- which(rownames(model$GDP$BEAGrossOutputIO)==disagg$OriginalSectorCode)
  #Obtain row with original vector in GDPGrossOutput object
  originalGDPVector <- model$GDP$BEAGrossOutputIO[originalGDPIndex,]
  #Create new rows where disaggregated values will be stored
  disaggGDPBEAGrossOutputIOSectors <-originalGDPVector[rep(seq_len(nrow(originalGDPVector)), length(disagg$DisaggregatedSectorCodes)),,drop=FALSE]
  
  
  #Get Index for Disaggregated Industries in the use table
  disaggUseIndIndex <- which(colnames(model$UseTransactions)==disagg$DisaggregatedSectorCodes[1])
  disaggUseEndIndex <- disaggUseIndIndex+length(disagg$DisaggregatedSectorCodes)-1
  
  #calculate industry ratios after disaggregation from Use table
  disaggIndRatios <- colSums(model$UseTransactions[,disaggUseIndIndex:disaggUseEndIndex]) + colSums(model$UseValueAdded[,disaggUseIndIndex:disaggUseEndIndex])
  disaggIndRatios <- disaggIndRatios / sum(disaggIndRatios) 
  
  #apply ratios to GDP values
  disaggGDPBEAGrossOutputIOSectors <- disaggGDPBEAGrossOutputIOSectors *t(disaggIndRatios)
  #rename rows
  rownames(disaggGDPBEAGrossOutputIOSectors) <- disagg$DisaggregatedSectorCodes
  
  #bind new values to original table
  newGDPBEAGrossOutputIO <- rbind(model$GDP$BEAGrossOutputIO[1:originalGDPIndex-1,], disaggGDPBEAGrossOutputIOSectors, model$GDP$BEAGrossOutputIO[-(1:originalGDPIndex),])
  
  
  return(newGDPBEAGrossOutputIO)
  
}
Disaggregate Commodity Output model object
}
